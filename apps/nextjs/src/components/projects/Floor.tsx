"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/floor.glb --types 
*/
import { useLayoutEffect, useRef } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import gsap from "gsap";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Floor: THREE.Mesh;
    Floor_1: THREE.Mesh;
    road1: THREE.Mesh;
    road2: THREE.Mesh;
    walkway: THREE.Mesh;
  };
  materials: {
    ["Concrete Base 01"]: THREE.MeshStandardMaterial;
    ["Leather Base 03"]: THREE.MeshStandardMaterial;
    ["Damaged road procedural/paintable"]: THREE.MeshStandardMaterial;
  };
};

// type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Floor(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/floor.glb") as GLTFResult;
  const tl = useRef<GSAPTimeline>();
  const scroll = useScroll();

  useFrame(() => {
    if (!tl.current) return;
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    // if (!ref.current) return
    tl.current = gsap.timeline({ defaults: { duration: 1 } });

    Object.values(materials).forEach((material) => {
      material.transparent = true;
      tl.current!.to(
        material,
        {
          opacity: 0,
        },
        0,
      ).to(
        material,
        {
          opacity: 0,
        },
        1,
      );
    });
  }, []);
  return (
    <group {...props} dispose={null}>
      <group position={[8.2, 0.022, -13.2]}>
        <mesh
          geometry={nodes.Floor.geometry}
          material={materials["Concrete Base 01"]}
        />
        <mesh
          geometry={nodes.Floor_1.geometry}
          material={materials["Leather Base 03"]}
        />
      </group>
      <mesh
        geometry={nodes.road1.geometry}
        material={materials["Damaged road procedural/paintable"]}
        position={[12.115, -0.078, 9.92]}
      />
      <mesh
        geometry={nodes.road2.geometry}
        material={materials["Damaged road procedural/paintable"]}
        position={[12.115, -0.078, 9.92]}
      />
      <mesh
        geometry={nodes.walkway.geometry}
        material={nodes.walkway.material}
        position={[20.115, -0.078, -47.856]}
      />
    </group>
  );
}

useGLTF.preload("/models/floor.glb");
